// bot/handlers/subscriptionHandler/paymentHandlers/cryptoPaymentHandler.js
const BasePaymentHandler = require('./basePaymentHandler');
const cryptoPayService = require('../../../../services/cryptoPayService');
const userService = require('../../../../services/userService');


class CryptoPaymentHandler extends BasePaymentHandler {
    constructor(bot) {
        super(bot);
        this.bot = bot;
    }

    async showPaymentMethods(chatId, messageId, tariffName) {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ tariffName –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
        if (!tariffName || typeof tariffName !== 'string') {
            console.error('–û—à–∏–±–∫–∞: tariffName –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π', tariffName);
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä tariffName');
        }

        const tariffDisplayName = tariffName.charAt(0).toUpperCase() + tariffName.slice(1);

        const paymentMethodsMessage = `
*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*

–¢–∞—Ä–∏—Ñ: *${tariffDisplayName}*

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:
`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üí∞ Crypto Bot (USDT, TON, BTC)', callback_data: `pay_crypto_${tariffName}` }],
                    [{ text: '‚≠ê Telegram Stars', callback_data: `pay_stars_${tariffName}` }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ—É', callback_data: `tariff_${tariffName}` }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }]
                ]
            },
            parse_mode: 'Markdown'
        };

        await this.bot.editMessageText(paymentMethodsMessage, {
            chat_id: chatId,
            message_id: messageId,
            ...keyboard
        });
    }

    async handlePayment(chatId, messageId, tariffName, userId) {
        try {
            const invoice = await cryptoPayService.createTariffInvoice(tariffName, userId);
            this.createdInvoices.set(invoice.invoice_id.toString(), invoice);

            const tariffDisplayName = tariffName.charAt(0).toUpperCase() + tariffName.slice(1);
            const paymentMessage = `
*–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ ${tariffDisplayName} —á–µ—Ä–µ–∑ Crypto Bot*

–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:
${invoice.bot_invoice_url}

–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.
ID —Å—á–µ—Ç–∞: ${invoice.invoice_id}
`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí≤ –û–ø–ª–∞—Ç–∏—Ç—å', url: invoice.bot_invoice_url }],
                        [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `check_payment_${invoice.invoice_id}` }],
                        [{ text: '‚óÄÔ∏è –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', callback_data: `select_${tariffName}` }],
                        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }]
                    ]
                },
                parse_mode: 'Markdown'
            };

            await this.bot.editMessageText(paymentMessage, {
                chat_id: chatId,
                message_id: messageId,
                ...keyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
            throw error;
        }
    }

    async handleCheckPayment(chatId, messageId, invoiceId, query) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ —á–µ—Ä–µ–∑ API
            let invoice = await cryptoPayService.getInvoiceById(invoiceId);

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ API, –Ω–æ –µ—Å—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if (!invoice && this.createdInvoices.has(invoiceId.toString())) {
                invoice = this.createdInvoices.get(invoiceId.toString());

                // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ API
                try {
                    const latestInvoices = await cryptoPayService.getInvoices({ count: 100 });
                    const updatedInvoice = latestInvoices.find(inv => inv.invoice_id.toString() === invoiceId.toString());
                    if (updatedInvoice) {
                        invoice = updatedInvoice;
                    }
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', e);
                }
            }

            if (!invoice) {
                // –ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                const notFoundMessage = `
*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞* ‚ö†Ô∏è

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ (ID: ${invoiceId}). 
–í–æ–∑–º–æ–∂–Ω–æ, —Å—á–µ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç.
`;

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }],
                            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
                        ]
                    },
                    parse_mode: 'Markdown'
                };

                await this.bot.editMessageText(notFoundMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...keyboard
                });

                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–Ω–≤–æ–π—Å–∞
            if (invoice.status === 'paid') {
                // –ò–Ω–≤–æ–π—Å –æ–ø–ª–∞—á–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                let payload = {};
                try {
                    if (invoice.payload) {
                        payload = JSON.parse(invoice.payload);
                    }
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ payload:', e);
                }

                const tariffName = payload.tariff || '–≤—ã–±—Ä–∞–Ω–Ω—ã–π';
                const tariffDisplayName = tariffName.charAt(0).toUpperCase() + tariffName.slice(1);

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const userId = payload.user_id || query.from.id;
                await userService.activateSubscription(userId, tariffName, {
                    payment_id: invoice.invoice_id.toString(),
                    payment_method: 'crypto',
                    payment_amount: parseFloat(invoice.amount)
                });

                const successMessage = `
*–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!* ‚úÖ

–í–∞—à —Ç–∞—Ä–∏—Ñ *${tariffDisplayName}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É!
`;

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
                        ]
                    },
                    parse_mode: 'Markdown'
                };

                await this.bot.editMessageText(successMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...keyboard
                });
            } else if (invoice.status === 'active') {
                // –ò–Ω–≤–æ–π—Å –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
                let tariffName = '–≤—ã–±—Ä–∞–Ω–Ω—ã–π';
                try {
                    if (invoice.payload) {
                        const payload = JSON.parse(invoice.payload);
                        tariffName = payload.tariff || tariffName;
                    }
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ payload:', e);
                }

                const tariffDisplayName = tariffName.charAt(0).toUpperCase() + tariffName.slice(1);

                const waitingMessage = `
*–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã* ‚è≥

–°—á–µ—Ç –∑–∞ —Ç–∞—Ä–∏—Ñ *${tariffDisplayName}* –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∂–µ.
`;

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üí≤ –û–ø–ª–∞—Ç–∏—Ç—å', url: invoice.bot_invoice_url }],
                            [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `check_payment_${invoice.invoice_id}` }],
                            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }],
                            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
                        ]
                    },
                    parse_mode: 'Markdown'
                };

                try {
                    await this.bot.editMessageText(waitingMessage, {
                        chat_id: chatId,
                        message_id: messageId,
                        ...keyboard
                    });
                } catch (msgError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', msgError.description || msgError.message);
                    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback
                    if (query && msgError.description && msgError.description.includes('message is not modified')) {
                        await this.bot.answerCallbackQuery(query.id, {
                            text: '–°—á–µ—Ç –≤—Å–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.',
                            show_alert: true
                        });
                    }
                }
            } else if (invoice.status === 'expired') {
                // –ò–Ω–≤–æ–π—Å –∏—Å—Ç–µ–∫
                const expiredMessage = `
*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫* ‚åõ

–°—á–µ—Ç —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.
`;

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }],
                            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
                        ]
                    },
                    parse_mode: 'Markdown'
                };

                await this.bot.editMessageText(expiredMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...keyboard
                });
            } else {
                // –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞)
                const statusMessage = `
*–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞: ${invoice.status}* ‚ÑπÔ∏è

–°—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.
`;

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }],
                            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
                        ]
                    },
                    parse_mode: 'Markdown'
                };

                await this.bot.editMessageText(statusMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...keyboard
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã:', error);

            const errorMessage = `
*–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã*

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `check_payment_${invoiceId}` }],
                        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }],
                        [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
                    ]
                },
                parse_mode: 'Markdown'
            };

            try {
                await this.bot.editMessageText(errorMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...keyboard
                });
            } catch (msgError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', msgError.description || msgError.message);
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                if (msgError.description && msgError.description.includes('message is not modified')) {
                    await this.bot.sendMessage(chatId, '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.');
                }
            }
        }
    }
}

module.exports = CryptoPaymentHandler;