// bot/handlers/subscriptionHandler/paymentHandlers/cardPaymentHandler.js
const BasePaymentHandler = require('./basePaymentHandler');
const { formatTariffName, formatPrice } = require('../../../../utils/formatUtils');
const { getBackToTariffsButton, getMainMenuButton } = require('../../../../utils/keyboardUtils');
const {
    createPaymentMethodsMessage,
    createCardPaymentMessage,
    createPaymentSuccessMessage
} = require('../../../../templates/messageTemplates');
const tariffs = require('../../../../config/tariffs');
const { PAYMENT_METHODS } = require('../../../../constants/paymentConstants');

class CardPaymentHandler extends BasePaymentHandler {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞—Ä—Ç–æ–π
     * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
     */
    constructor(bot) {
        super(bot);
        this.providerToken = process.env.PAYMENT_PROVIDER_TOKEN; // –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
     * @param {number} chatId - ID —á–∞—Ç–∞
     * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} tariffName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
     */
    async showPaymentMethods(chatId, messageId, tariffName) {
        try {
            const tariffDisplayName = formatTariffName(tariffName);
            const price = this.getPriceForTariff(tariffName);
            const formattedPrice = formatPrice(price, 'RUB');

            const message = createPaymentMethodsMessage(tariffDisplayName, formattedPrice);

            const keyboard = [
                [{ text: 'üí∞ Crypto Bot (USDT, TON, BTC)', callback_data: `pay_crypto_${tariffName}` }],
                [{ text: '‚≠ê Telegram Stars', callback_data: `pay_stars_${tariffName}` }],
                [{ text: 'üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π', callback_data: `pay_card_${tariffName}` }],
                [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ—É', callback_data: `tariff_${tariffName}` }],
                getBackToTariffsButton()
            ];

            await this.messageService.updateMessage(chatId, messageId, message, keyboard);
        } catch (error) {
            await this.errorHandler.handleError(chatId, error, 'CardPaymentHandler.showPaymentMethods');
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π
     * @param {number} chatId - ID —á–∞—Ç–∞
     * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} tariffName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handlePayment(chatId, messageId, tariffName, userId) {
        try {
            const price = this.getPriceForTariff(tariffName);
            const tariffDisplayName = formatTariffName(tariffName);
            const formattedPrice = formatPrice(price, 'RUB');

            const message = createCardPaymentMessage(tariffDisplayName, formattedPrice);

            const keyboard = [
                [{ text: `üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ${formattedPrice}`, callback_data: `initiate_card_payment_${tariffName}` }],
                [{ text: '‚óÄÔ∏è –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', callback_data: `select_${tariffName}` }],
                getBackToTariffsButton()
            ];

            await this.messageService.updateMessage(chatId, messageId, message, keyboard);

            // –ó–∞–ø–æ–º–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
            this.createdInvoices.set(`${userId}_${tariffName}`, {
                tariffName,
                userId,
                price,
                created: new Date().getTime()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –∫–∞—Ä—Ç–æ–π:', error);
            await this.errorHandler.handleError(chatId, error, 'CardPaymentHandler.handlePayment');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
     * @param {number} chatId - ID —á–∞—Ç–∞
     * @param {string} tariffName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} query - –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
     */
    async initiatePayment(chatId, tariffName, userId, query) {
        try {
            if (!this.providerToken) {
                throw new Error('–¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
            }

            const price = this.getPriceForTariff(tariffName);
            const tariffDisplayName = formatTariffName(tariffName);

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∏–Ω–≤–æ–π—Å
            const invoice = await this.bot.sendInvoice(
                chatId,
                `–ü–æ–¥–ø–∏—Å–∫–∞ ${tariffDisplayName}`, // title
                `–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ${tariffDisplayName} –Ω–∞ 1 –º–µ—Å—è—Ü`, // description
                JSON.stringify({ tariff: tariffName, userId, paymentMethod: PAYMENT_METHODS.CARD }), // payload
                this.providerToken, // –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
                'RUB', // –≤–∞–ª—é—Ç–∞
                [{ label: '–ü–æ–¥–ø–∏—Å–∫–∞', amount: price * 100 }], // —Ü–µ–Ω—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                {
                    photo_url: `https://example.com/tariff_images/${tariffName}.jpg`, // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
                    need_name: false,
                    need_phone_number: false,
                    need_email: false,
                    need_shipping_address: false,
                    is_flexible: false
                }
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            this.createdInvoices.set(`${userId}_${tariffName}_invoice`, {
                messageId: invoice.message_id,
                invoice_id: invoice.message_id,
                created: new Date().getTime()
            });

            // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.messageService.sendNotification(
                query.id,
                "–ò–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
                true
            );

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:', error);

            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (error.message.includes('–¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')) {
                await this.messageService.sendNotification(
                    query.id,
                    "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                    true
                );
            } else {
                await this.messageService.sendNotification(
                    query.id,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                    true
                );
            }

            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
     * @param {number} chatId - ID —á–∞—Ç–∞
     * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} data - –î–∞–Ω–Ω—ã–µ callback –∑–∞–ø—Ä–æ—Å–∞
     * @param {Object} query - –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
     */
    async handleCheckPayment(chatId, messageId, data, query) {
        try {
            const parts = data.split('_');
            const invoiceId = parts[2]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç: check_card_payment_invoiceId

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ
            const hasPayment = Array.from(this.createdInvoices.entries())
                .some(([key, value]) => key.includes('_paid') && value.invoice_id === invoiceId);

            if (hasPayment) {
                // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                const successMessage = createPaymentSuccessMessage(
                    formatTariffName(this.createdInvoices.get(`${query.from.id}_paid`).tariffName || '–≤—ã–±—Ä–∞–Ω–Ω—ã–π')
                );

                const keyboard = [getMainMenuButton()];

                await this.messageService.updateMessage(chatId, messageId, successMessage, keyboard);
            } else {
                // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
                await this.messageService.sendNotification(
                    query.id,
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                    true
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:', error);
            await this.errorHandler.handleError(chatId, error, 'CardPaymentHandler.handleCheckPayment');
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞
     * @param {string} tariffName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
     * @returns {number} - –¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞
     */
    getPriceForTariff(tariffName) {
        return tariffs[tariffName]?.prices?.rub || tariffs.silver.prices.rub;
    }
}

module.exports = CardPaymentHandler;