// bot/handlers/subscriptionHandler/paymentHandlers/starsPaymentHandler.js
const BasePaymentHandler = require('./basePaymentHandler');

class StarsPaymentHandler extends BasePaymentHandler {
    constructor(bot) {
        super(bot);
        this.bot = bot;
    }

    async showPaymentMethods(chatId, messageId, tariffName) {
        const tariffDisplayName = tariffName.charAt(0).toUpperCase() + tariffName.slice(1);
        const starsAmount = this.getStarsAmountForTariff(tariffName);

        const paymentMethodsMessage = `
*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*

–¢–∞—Ä–∏—Ñ: *${tariffDisplayName}*
–°—Ç–æ–∏–º–æ—Å—Ç—å: *${starsAmount} Stars*

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:
`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: `‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å ${starsAmount} Stars`, callback_data: `pay_stars_${tariffName}` }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ—É', callback_data: `tariff_${tariffName}` }],
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }]
                ]
            },
            parse_mode: 'Markdown'
        };

        await this.bot.editMessageText(paymentMethodsMessage, {
            chat_id: chatId,
            message_id: messageId,
            ...keyboard
        });
    }

    async handlePayment(chatId, messageId, tariffName, userId) {
        try {
            const starsAmount = this.getStarsAmountForTariff(tariffName);
            const tariffDisplayName = tariffName.charAt(0).toUpperCase() + tariffName.slice(1);

            // –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
            const paymentMessage = `
*–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ ${tariffDisplayName} —á–µ—Ä–µ–∑ Telegram Stars*

–°—Ç–æ–∏–º–æ—Å—Ç—å: *${starsAmount} Stars*

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É".
`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stars –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
                        [{ text: `‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å ${starsAmount} Stars`, callback_data: `initiate_stars_payment_${tariffName}` }],
                        [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `check_stars_payment_${tariffName}_${userId}` }],
                        [{ text: '‚óÄÔ∏è –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', callback_data: `select_${tariffName}` }],
                        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }]
                    ]
                },
                parse_mode: 'Markdown'
            };

            await this.bot.editMessageText(paymentMessage, {
                chat_id: chatId,
                message_id: messageId,
                ...keyboard
            });

            // –ó–∞–ø–æ–º–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            this.createdInvoices.set(`${userId}_${tariffName}`, {
                tariffName,
                userId,
                starsAmount,
                created: new Date().getTime()
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–ª–∞—Ç–µ–∂–∞ Stars:', error);
            throw error;
        }
    }

    async initiatePayment(chatId, tariffName, userId, query) {
        try {
            const starsAmount = this.getStarsAmountForTariff(tariffName);
            const tariffDisplayName = tariffName.charAt(0).toUpperCase() + tariffName.slice(1);

            // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Stars
            const invoice = await this.bot.sendInvoice(
                chatId,
                `–ü–æ–¥–ø–∏—Å–∫–∞ ${tariffDisplayName}`,
                `–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ${tariffDisplayName} –Ω–∞ 1 –º–µ—Å—è—Ü`,
                JSON.stringify({ tariff: tariffName, userId }),
                '',
                'XTR',
                [{ label: '–ü–æ–¥–ø–∏—Å–∫–∞', amount: starsAmount }],
                {
                    need_name: false,
                    need_phone_number: false,
                    need_email: false,
                    need_shipping_address: false,
                    is_flexible: false
                }
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            this.createdInvoices.set(`${userId}_${tariffName}_invoice`, {
                messageId: invoice.message_id,
                invoice_id: invoice.message_id,
                created: new Date().getTime()
            });

            // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.bot.answerCallbackQuery(query.id, {
                text: "–ò–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
                show_alert: true
            });

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ Stars:', error);
            throw error;
        }
    }

    async handleCheckPayment(chatId, messageId, data, query) {
        try {
            console.log('–î–∞–Ω–Ω—ã–µ callback:', data);

            const parts = data.split('_');
            const tariffName = parts[3];
            const userId = parts[4];

            console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ:', tariffName, 'userId:', userId);

            const tariffDisplayName = tariffName.charAt(0).toUpperCase() + tariffName.slice(1);
            const starsAmount = this.getStarsAmountForTariff(tariffName);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å
            const invoiceKey = `${userId}_${tariffName}_invoice`;
            const hasInvoice = this.createdInvoices.has(invoiceKey);

            console.log('–ö–ª—é—á –∏–Ω–≤–æ–π—Å–∞:', invoiceKey, '–ù–∞–π–¥–µ–Ω:', hasInvoice);
            console.log('–í—Å–µ –∫–ª—é—á–∏:', Array.from(this.createdInvoices.keys()));

            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API Telegram
            const paymentConfirmedKey = `${userId}_${tariffName}_paid`;
            const isPaymentConfirmed = this.createdInvoices.has(paymentConfirmedKey);

            // –ö–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            const messageStatusKey = `${userId}_${tariffName}_message_status`;
            const currentStatus = this.createdInvoices.get(messageStatusKey)?.status || '';

            try {
                if (hasInvoice && isPaymentConfirmed) {
                    // –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
                    if (currentStatus !== 'success') {
                        const successMessage = `
*–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!* ‚úÖ

–í–∞—à —Ç–∞—Ä–∏—Ñ *${tariffDisplayName}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É!
`;

                        const keyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
                                ]
                            },
                            parse_mode: 'Markdown'
                        };

                        await this.bot.editMessageText(successMessage, {
                            chat_id: chatId,
                            message_id: messageId,
                            ...keyboard
                        });

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
                        this.createdInvoices.set(messageStatusKey, { status: 'success' });

                        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
                        this.createdInvoices.delete(invoiceKey);
                        this.createdInvoices.delete(paymentConfirmedKey);
                    } else {
                        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ—Ç –∂–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await this.bot.answerCallbackQuery(query.id, {
                            text: "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                            show_alert: false
                        });
                    }
                } else if (hasInvoice) {
                    // –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
                    if (currentStatus !== 'waiting') {
                        const waitingMessage = `
*–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã* ‚è≥

–ú—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ *${tariffDisplayName}* –Ω–∞ —Å—É–º–º—É *${starsAmount} Stars*.

–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" –µ—â–µ —Ä–∞–∑.
`;

                        const keyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `check_stars_payment_${tariffName}_${userId}` }],
                                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }]
                                ]
                            },
                            parse_mode: 'Markdown'
                        };

                        await this.bot.editMessageText(waitingMessage, {
                            chat_id: chatId,
                            message_id: messageId,
                            ...keyboard
                        });

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
                        this.createdInvoices.set(messageStatusKey, { status: 'waiting' });
                    } else {
                        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ—Ç –∂–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await this.bot.answerCallbackQuery(query.id, {
                            text: "–ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                            show_alert: false
                        });
                    }
                } else {
                    // –ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
                    if (currentStatus !== 'notfound') {
                        const noInvoiceMessage = `
*–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞* ‚ùå

–ú—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ *${tariffDisplayName}*.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å ${starsAmount} Stars" –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã.
`;

                        const keyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: `‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å ${starsAmount} Stars`, callback_data: `initiate_stars_payment_${tariffName}` }],
                                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'subscription_menu' }]
                                ]
                            },
                            parse_mode: 'Markdown'
                        };

                        await this.bot.editMessageText(noInvoiceMessage, {
                            chat_id: chatId,
                            message_id: messageId,
                            ...keyboard
                        });

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
                        this.createdInvoices.set(messageStatusKey, { status: 'notfound' });
                    } else {
                        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ—Ç –∂–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await this.bot.answerCallbackQuery(query.id, {
                            text: "–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.",
                            show_alert: false
                        });
                    }
                }
            } catch (editError) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (editError.description && editError.description.includes('message is not modified')) {
                    // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await this.bot.answerCallbackQuery(query.id, {
                        text: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞...",
                        show_alert: false
                    });
                } else {
                    // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                    throw editError;
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã Stars:', error);
            throw error;
        }
    }
    getStarsAmountForTariff(tariffName) {
        // –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –∫—É—Ä—Å–∞: 1 Star ‚âà 2,04 —Ä—É–±–ª—è
        const tariffPrices = {
            silver: 99,    // 199 —Ä—É–±
            gold: 180,     // 370 —Ä—É–±
            platinum: 299, // 599 —Ä—É–±
            diamond: 490   // 999 —Ä—É–±
        };
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º silver –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return tariffPrices[tariffName] || tariffPrices.silver;
    }
}

module.exports = StarsPaymentHandler;