// bot/handlers/subscriptionHandler/subscriptionHandler.js
const messages = require('../../../templates/messages');
const MessageService = require('../../../services/messageService');
const { createErrorHandler } = require('../../../utils/errorHandler');
const { getTariffMenuButtons, getTariffSelectionButtons } = require('../../../utils/keyboardUtils');
const { PAYMENT_METHODS } = require('../../../constants/paymentConstants');
const CryptoPaymentHandler = require('./paymentHandlers/cryptoPaymentHandler');
const StarsPaymentHandler = require('./paymentHandlers/starsPaymentHandler');
const CardPaymentHandler = require('./paymentHandlers/cardPaymentHandler');

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
function createPaymentHandlers(bot) {
    return {
        [PAYMENT_METHODS.CRYPTO]: new CryptoPaymentHandler(bot),
        [PAYMENT_METHODS.STARS]: new StarsPaymentHandler(bot),
        [PAYMENT_METHODS.CARD]: new CardPaymentHandler(bot)
    };
}

// –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—Å—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏
function createSubscriptionHandler(bot) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const messageService = new MessageService(bot);
    const errorHandler = createErrorHandler(bot);
    const paymentHandlers = createPaymentHandlers(bot);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    async function handleSubscriptionMenu(chatId, messageId) {
        try {
            const subscriptionMessage = messages.getSubscriptionMessage();
            const keyboard = getTariffMenuButtons();

            await messageService.updateMessage(chatId, messageId, subscriptionMessage, keyboard);
        } catch (error) {
            await errorHandler.handleError(chatId, error, 'handleSubscriptionMenu');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞—Ä–∏—Ñ–∞
    async function handleTariffDetails(chatId, messageId, tariffName) {
        try {
            const tariffMessage = messages.tariffs[tariffName];
            const keyboard = getTariffSelectionButtons(tariffName);

            await messageService.updateMessage(chatId, messageId, tariffMessage, keyboard);
        } catch (error) {
            await errorHandler.handleError(chatId, error, 'handleTariffDetails');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
    async function handleTariffSelection(chatId, messageId, tariffName, userId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
            await paymentHandlers[PAYMENT_METHODS.CRYPTO].showPaymentMethods(chatId, messageId, tariffName);
        } catch (error) {
            await errorHandler.handleError(chatId, error, 'handleTariffSelection');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö callback'–æ–≤
    async function handlePaymentCallback(chatId, messageId, callbackData, userId, query) {
        try {
            const [action, paymentMethod, ...rest] = callbackData.split('_');

            if (action === 'pay' && paymentHandlers[paymentMethod]) {
                const tariffName = rest.join('_');
                await paymentHandlers[paymentMethod].handlePayment(chatId, messageId, tariffName, userId);
            } else if (action === 'check') {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è Stars –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
                if (paymentMethod === 'stars' && paymentHandlers[PAYMENT_METHODS.STARS]) {
                    await paymentHandlers[PAYMENT_METHODS.STARS].handleCheckPayment(chatId, messageId, callbackData, query);
                } else if (paymentMethod === 'payment') {
                    const invoiceId = rest.join('_');
                    for (const handler of Object.values(paymentHandlers)) {
                        try {
                            await handler.handleCheckPayment(chatId, messageId, invoiceId, query);
                            return;
                        } catch (e) {
                            continue;
                        }
                    }
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂');
                }
            }
        } catch (error) {
            await errorHandler.handleError(chatId, error, 'handlePaymentCallback');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    async function handleInitiatePayment(chatId, paymentType, tariffName, userId, query) {
        try {
            if (paymentType === PAYMENT_METHODS.STARS && paymentHandlers[PAYMENT_METHODS.STARS]) {
                await paymentHandlers[PAYMENT_METHODS.STARS].initiatePayment(chatId, tariffName, userId, query);
            } else if (paymentType === PAYMENT_METHODS.CARD && paymentHandlers[PAYMENT_METHODS.CARD]) {
                await paymentHandlers[PAYMENT_METHODS.CARD].initiatePayment(chatId, tariffName, userId, query);
            } else {
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞: ${paymentType}`);
            }
        } catch (error) {
            await errorHandler.handleError(chatId, error, 'handleInitiatePayment');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    async function handleBackToMain(chatId, messageId, firstName) {
        try {
            const welcomeMessage = messages.getWelcomeMessage(firstName);
            const keyboard = [
                [{ text: 'üí≥ –•–æ—á—É –≤–∑—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscription_menu' }]
            ];

            await messageService.updateMessage(chatId, messageId, welcomeMessage, keyboard);
        } catch (error) {
            await errorHandler.handleError(chatId, error, 'handleBackToMain');
        }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    return {
        handleSubscriptionMenu,
        handleTariffDetails,
        handleTariffSelection,
        handlePaymentCallback,
        handleInitiatePayment,
        handleBackToMain,
        paymentHandlers
    };
}

module.exports = createSubscriptionHandler;